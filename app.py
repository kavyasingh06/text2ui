import streamlit as st
from jinja2 import Environment
from transformers import pipeline
from pathlib import Path
import json, re

# Streamlit page setup
st.set_page_config(page_title="Text2UI â€“ React & Flutter Forms")
st.title("Text2UI â€“ Generate React & Flutter Forms ðŸš€")

# ----------------- Load Flutter template -----------------
templates_dir = Path("templates")
flutter_str = (templates_dir / "flutter_form.j2").read_text()

env = Environment(
    variable_start_string="%%",
    variable_end_string="%%",
    block_start_string="[%", 
    block_end_string="%]"
)

# ----------------- React template -----------------
react_template = """// React - Generated by Text2UI
import React, { useState } from "react";

export default function GeneratedForm() {
  const [formData, setFormData] = useState({
[% for field in components %]
    %% field.id %%: [% if field.type == "checkbox" %]false[% else %]""[% endif %],
[% endfor %]
  });

  const handleChange = (e) => {
    const { name, type, value, checked } = e.target;
    setFormData({ ...formData, [name]: type === "checkbox" ? checked : value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>%% title %%</h2>
[% for field in components %]
      <div style={{ marginBottom: "12px" }}>
        <label>%% field.label %%</label>
        [% if field.type == "checkbox" %]
        <input
          type="checkbox"
          name="%% field.id %%"
          checked={formData["%% field.id %%"]}
          onChange={handleChange}
        />
        [% elif field.type in ["dropdown","select"] %]
        <select
          name="%% field.id %%"
          value={formData["%% field.id %%"]}
          onChange={handleChange}
        >
          <option value="">Select</option>
[% for option in field.options %]
          <option value="%% option %%">%% option %%</option>
[% endfor %]
        </select>
        [% else %]
        <input
          type="%% field.type %%"
          name="%% field.id %%"
          value={formData["%% field.id %%"]}
          onChange={handleChange}
          placeholder="%% field.placeholder %%"
        />
        [% endif %]
      </div>
[% endfor %]
      <button type="submit">%% submit_label %%</button>
    </form>
  );
}
"""

# ----------------- Load LLM -----------------
@st.cache_resource
def load_generator():
    return pipeline("text2text-generation", model="google/flan-t5-small")

gen = load_generator()

# ----------------- Parse components -----------------
def extract_components(prompt: str):
    keywords = {
        "name": ("text", "Name", "Enter your name"),
        "participant name": ("text", "Participant Name", "Enter participant name"),
        "email": ("email", "Email", "Enter your email"),
        "phone": ("tel", "Phone", "Enter your phone number"),
        "username": ("text", "Username", "Enter your username"),
        "password": ("password", "Password", "Enter your password"),
        "confirm password": ("password", "Confirm Password", "Re-enter password"),
        "message": ("textarea", "Message", "Enter your message"),
        "comments": ("textarea", "Comments", "Enter comments"),
        "rating": ("number", "Rating", "Enter rating 1-5"),
        "tickets": ("number", "Number of Tickets", "Enter number of tickets"),
        "number of tickets": ("number", "Number of Tickets", "Enter number of tickets"),
        "terms": ("checkbox", "Agree to Terms", ""),
    }

    fields = []
    seen_ids = set()

    # Detect keywords
    for key, (ftype, label, placeholder) in keywords.items():
        if key.lower() in prompt.lower():
            field_id = key.replace(" ", "_")
            if field_id not in seen_ids:
                fields.append({
                    "id": field_id,
                    "type": ftype,
                    "label": label,
                    "placeholder": placeholder
                })
                seen_ids.add(field_id)

    # Detect dropdowns (preserve case)
    dropdown_matches = re.findall(r"\(dropdown: ([^)]+)\)", prompt)
    for match in dropdown_matches:
        options = [opt.strip() for opt in match.split(",")]
        field_id = re.sub(r"[^a-zA-Z0-9_]", "_", options[0])
        if field_id not in seen_ids:
            fields.append({
                "id": field_id,
                "type": "dropdown",
                "label": " / ".join(options),
                "options": options
            })
            seen_ids.add(field_id)

    if not fields:
        fields = [{"id": "field1", "type": "text", "label": "Field 1", "placeholder": "Enter value"}]

    return fields

# ----------------- Generate JSON spec -----------------
def generate_components(prompt: str):
    try:
        instruction = (
            "Convert the following UI description into JSON for a form. "
            "Return ONLY JSON with keys: title, components (id, type, label, placeholder/options), submit_label. "
            f"UI description: {prompt}"
        )
        resp = gen(instruction, max_length=256)[0]["generated_text"]
        resp = re.sub(r"```[\w]*", "", resp).strip()
        m = re.search(r"(\{[\s\S]*\})", resp)
        json_text = m.group(1) if m else resp
        json_text = re.sub(r",\s*}", "}", json_text)
        json_text = re.sub(r",\s*]", "]", json_text)
        spec = json.loads(json_text)
        if "components" not in spec or not spec["components"]:
            spec["components"] = extract_components(prompt)
        if "title" not in spec:
            spec["title"] = "Generated Form"
        if "submit_label" not in spec:
            spec["submit_label"] = "Submit"
    except Exception:
        spec = {
            "title": "Generated Form",
            "components": extract_components(prompt),
            "submit_label": "Submit"
        }
    return spec

# ----------------- Streamlit UI -----------------
prompt = st.text_area("Describe the form you want")
framework = st.selectbox("Choose Framework", ["Flutter", "React"])

if st.button("Generate Code"):
    spec = generate_components(prompt)
    if framework == "React":
        template = env.from_string(react_template)
        code = template.render(spec)
        lang = "javascript"
        filename = "GeneratedForm.jsx"
    else:
        template = env.from_string(flutter_str)
        code = template.render(spec)
        lang = "dart"
        filename = "generated_form.dart"

    st.subheader(f"Generated {framework} Code")
    st.code(code, language=lang)
    st.download_button("Download Code", code, file_name=filename)
